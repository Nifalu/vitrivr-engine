package org.vitrivr.engine.base.resolvers

import org.vitrivr.engine.core.model.retrievable.RetrievableId
import org.vitrivr.engine.core.operators.resolver.Resolvable
import org.vitrivr.engine.core.operators.resolver.Resolver
import org.vitrivr.engine.core.source.file.MimeType
import java.io.InputStream
import java.io.OutputStream
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardOpenOption

/**
 * A [Resolver] resolves a physical file from disk.
 *
 * @author Fynn Faber
 * @version 1.0.0
 */
class DiskResolver(private val location: Path, private val mimeType: MimeType) : Resolver {
    init {
        /* Make sure, directory exists. */
        if (!Files.exists(this.location)) {
            Files.createDirectories(this.location)
        }
    }

    /**
     * Resolves the provided [RetrievableId] to a [Resolvable] using this [Resolver].
     *
     * @param id The [RetrievableId] to resolve.
     * @return [Resolvable] or null, if [RetrievableId] could not be resolved.
     */
    override fun resolve(id: RetrievableId): Resolvable = DiskResolvable(id)

    /**
     * A [Resolvable] generated by this [DiskResolver].
     */
    inner class DiskResolvable(override val retrievableId: RetrievableId): Resolvable {
        val path: Path
            get() = this@DiskResolver.location.resolve("$retrievableId.${this@DiskResolver.mimeType.fileExtension}")
        override val mimeType: MimeType
            get() = this@DiskResolver.mimeType
        override fun exists(): Boolean = Files.exists(this.path)
        override fun openInputStream(): InputStream = Files.newInputStream(this.path, StandardOpenOption.READ)
        override fun openOutputStream(): OutputStream = Files.newOutputStream(this.path, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE)
    }
}