plugins {
    id 'maven-publish'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$version_kotlin"
    id 'signing'
}

project.ext.lwjglVersion = "3.3.3"

switch (org.gradle.internal.os.OperatingSystem.current()) {
    case org.gradle.internal.os.OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case org.gradle.internal.os.OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case org.gradle.internal.os.OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

dependencies {
    api project(':vitrivr-engine-core')

    /* Apache Commons Math. */
    api group: "org.apache.commons", name: "commons-math3", version: version_commonsmath3

    /** JOML dependencies for 3D mesh support. */
    api group: 'org.joml', name: 'joml', version: version_joml

    /* JOGL dependency for 3D rendering support. */
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}"
    api "org.jogamp.jogl:jogl-all:${version_jogl}"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-windows-amd64"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-windows-i586"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-amd64"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-armv6"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-armv6hf"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-linux-i586"
    api "org.jogamp.jogl:jogl-all:${version_jogl}:natives-macosx-universal"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-windows-amd64"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-windows-i586"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-amd64"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-armv6"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-armv6hf"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-linux-i586"
    api "org.jogamp.gluegen:gluegen-rt:${version_jogl}:natives-macosx-universal"

    /** LWJGL. Minimal OpenGl Configuration from customizer https://www.lwjgl.org/customize **/
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-bgfx"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nanovg"
    implementation "org.lwjgl:lwjgl-nuklear"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-par"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"

}

dependencies {
    api project(':vitrivr-engine-core')
}

/* Publication of vitrivr engine query to Maven Central. */
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.vitrivr'
            artifactId = 'vitrivr-engine-plugin-m3d'
            version = System.getenv().getOrDefault("MAVEN_PUBLICATION_VERSION", version.toString())
            from components.java
            pom {
                name = 'vitrivr Engine Base'
                description = 'Shared based components of the vitrivr multimedia retrieval engine (e.g., database connection, features).'
                url = 'https://github.com/vitrivr/vitrivr-engine/'
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                developers {
                    developer {
                        id = 'ppanopticon'
                        name = 'Ralph Gasser'
                        email = 'ralph.gasser@unibas.ch'
                    }
                    developer {
                        id = 'lucaro'
                        name = 'Luca Rossetto'
                        email = 'rossetto@ifi.uzh.ch'
                    }
                    developer {
                        id = 'net-cscience-raphael'
                        name = 'Raphael Waltens√ºl'
                        email = 'raphael.waltenspuel@unibas.ch'
                    }
                    developer {
                        id = 'rahelarnold98'
                        name = 'Rahel Arnold'
                        email = 'rahel.arnold@unibas.ch'
                    }
                    developer {
                        id = 'faberf'
                        name = 'Fynn Faber'
                        email = 'fynnfirouz.faber@unibas.ch'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vitrivr/vitrivr-engine.git'
                    url = 'https://github.com/vitrivr/vitrivr-engine/'
                }
            }
        }
    }
    repositories {
        repositories {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                name = "OSSRH"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }
}