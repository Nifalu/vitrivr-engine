package org.vitrivr.engine.index.exporters

import com.sksamuel.scrimage.ImmutableImage
import com.sksamuel.scrimage.nio.JpegWriter
import com.sksamuel.scrimage.nio.PngWriter
import io.github.oshai.kotlinlogging.KLogger
import io.github.oshai.kotlinlogging.KotlinLogging
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import org.vitrivr.engine.core.context.IndexContext
import org.vitrivr.engine.core.model.content.element.ImageContent
import org.vitrivr.engine.core.model.retrievable.Retrievable
import org.vitrivr.engine.core.model.retrievable.attributes.ContentAttribute
import org.vitrivr.engine.core.operators.Operator
import org.vitrivr.engine.core.operators.ingest.Exporter
import org.vitrivr.engine.core.operators.ingest.ExporterFactory
import org.vitrivr.engine.core.source.file.MimeType

/**
 * An [Exporter] that generates thumbnails from videos and images.
 *
 * @author Finn Faber
 * @version 1.0.0
 */
class ThumbnailExporter : ExporterFactory {

    private val logger: KLogger = KotlinLogging.logger {}

    /**
     * Creates a new [Exporter] instance from this [ThumbnailExporter].
     *
     * @param input The [Operator] to acting as an input.
     * @param context The [IndexContext] to use.
     * @param parameters Optional set of parameters.
     */
    override fun newOperator(
        input: Operator<Retrievable>,
        context: IndexContext,
        parameters: Map<String, String>
    ): Exporter {
        logger.debug { "Creating new ThumbnailExporter with parameters $parameters." }
        val maxSideResolution = parameters["maxSideResolution"]?.toIntOrNull() ?: 400
        val mimeType = parameters["mimeType"]?.let {
            try {
                MimeType.valueOf(it.uppercase())
            } catch (e: java.lang.IllegalArgumentException) {
                null
            }
        } ?: MimeType.JPG
        return Instance(input, context, maxSideResolution, mimeType)
    }

    /**
     * The [Exporter] generated by this [ThumbnailExporter].
     */
    private class Instance(
        override val input: Operator<Retrievable>,
        private val context: IndexContext,
        private val maxResolution: Int,
        private val mimeType: MimeType
    ) : Exporter {
        protected val logger: KLogger = KotlinLogging.logger {}

        init {
            require(
                mimeType in setOf(
                    MimeType.JPEG,
                    MimeType.JPG,
                    MimeType.PNG
                )
            ) { "ThumbnailExporter only support image formats JPEG and PNG." }
        }

        override fun toFlow(scope: CoroutineScope): Flow<Retrievable> = this.input.toFlow(scope).map { retrievable ->
            val resolvable = this.context.resolver.resolve(retrievable.id)
            val content = retrievable.filteredAttributes(ContentAttribute::class.java).map { it.content }
                .filterIsInstance<ImageContent>().firstOrNull()
            if (resolvable != null && content != null) {
                val writer = when (mimeType) {
                    MimeType.JPEG,
                    MimeType.JPG -> JpegWriter()

                    MimeType.PNG -> PngWriter()
                    else -> throw IllegalArgumentException("Unsupported mime type $mimeType")
                }

                logger.debug { "Generating thumbnail for ${retrievable.id} with ${retrievable.type} and resolution $maxResolution. Storing it in ${resolvable.uri} with ${resolvable::class.simpleName}." }

                val imgBytes = ImmutableImage.fromAwt(content.content).let {
                    if (it.width > it.height) {
                        it.scaleToWidth(maxResolution)
                    } else {
                        it.scaleToHeight(maxResolution)
                    }
                }.bytes(writer)
                resolvable.openOutputStream().use {
                    it.write(imgBytes)
                }

            }
            retrievable
        }
    }
}

