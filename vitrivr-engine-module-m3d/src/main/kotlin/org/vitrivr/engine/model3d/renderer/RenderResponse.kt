package org.vitrivr.engine.model3d.renderer

import java.awt.image.BufferedImage
import java.io.*
import javax.imageio.ImageIO

/**
 * A [RenderResponse] as generated by the [ExternalRenderer].
 *
 * @author Ralph Gasser
 * @version 1.0.0
 */
data class RenderResponse(private var list: List<BufferedImage> = emptyList()) : Serializable {

    companion object {
        private const val serialVersionUID: Long = 43L
    }

    /**
     * Returns all the [BufferedImage]s contained in this [RenderResponse].
     *
     * @return [List] of [BufferedImage]s.
     */
    fun images(): List<BufferedImage> {
        return this.list
    }

    /**
     * Writes this [RenderResponse] to an [ObjectOutputStream].
     *
     * @param oos [ObjectOutputStream] to write to.
     */
    @Throws(IOException::class)
    private fun writeObject(oos: ObjectOutputStream) {
        oos.writeInt(this.list.size)
        for (image in this.list) {
            val baos = ByteArrayOutputStream()
            ImageIO.write(image, "png", baos)
            val bytes = baos.toByteArray()
            oos.writeInt(bytes.size)
            oos.write(bytes)
        }
    }

    /**
     * Reads this [RenderResponse] from an [ObjectOutputStream].
     *
     * @param in [ObjectInputStream] to read from.
     */
    @Throws(IOException::class)
    private fun readObject(`in`: ObjectInputStream) {
        val size = `in`.readInt()
        this.list = (0 until size).map {
            val length = `in`.readInt()
            val bytes = ByteArray(length)
            val bais = ByteArrayInputStream(bytes)
            `in`.readFully(bytes)
            ImageIO.read(bais)
        }
    }
}